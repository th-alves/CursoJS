//‚¨áÔ∏èAvan√ßando em JavaScript: Manipula√ß√£o de Arrays.
const frutas = ["Ma√ß√£", "Banana"];
frutas.unshift("P√™ra"); // Adiciona o item no index 0.
console.log(frutas);

frutas.shift(); // Remove o index 0.
console.log(frutas);

//üìçMap, filter, reduce etc...
const numeros = [1, 2, 3, 4, 5];

//‚úÖ O find apenas retorna o primeiro elemento que atenda o crit√©rio.
let numeroPar = numeros.find((num) => num % 2 === 0);
console.log(numeroPar); //2

//‚úÖ O filter retorna todos os elementos que atenderem o crit√©rio.
let numerosPares = numeros.filter((num) => num % 2 === 0);
console.log(numerosPares); //2, 4

//üìçManipula√ß√£o de strings ‚¨áÔ∏è
const frase = "Ol√°, Mundo!   ";
//‚úÖ Trim remove espa√ßos vazios do come√ßo e do fim da string.
console.log(frase.trim()); // "Ol√°, Mundo!"

//‚úÖ .startsWith e .endsWith verificam se a string poss√≠vel uma palavra espec√≠fica.
const frase2 = "JavaScript √© incr√≠vel!";
console.log(frase2.startsWith("Java"));
console.log(frase2.endsWith("!"));

//üìçExce√ß√µes e tratamentos de erros ‚¨áÔ∏è
try {
  //Vai tentar executar o bloco abaixo
  const idade = 15;
  if (idade < 18) {
    throw new Error("Menores n√£o podem votar!");
  }
} catch (error) {
  //Caso d√™ um erro, ser√° pego pelo catch, que executar√° o c√≥digo abaixo sem encerrar o programa
  console.log(error.message);
}

//üìçCallbacks s√£o fun√ß√µes que ser√£o executadas em outras fun√ß√µes ‚¨áÔ∏è
function cumprimentar(nome, callback) {
  console.log(`Bom dia, ${nome}!`);
  callback();
}

cumprimentar("Thiago", function () {
  console.log("Como voc√™ est√°?");
});

//üìçsetTimeOut depois de um tempo executa algo, uma vez ‚¨áÔ∏è
function mensagem() {
  console.log("pinto penis pal em agua, tanto fura at√© que rasga");
} // setTimeout(mensagem, 3000);

//üìçPromises‚¨áÔ∏è
const promessa = new Promise((resolve, reject) => {
  const idade = 22;
  if (idade < 18) {
    resolve("Voc√™ √© menor de idade!");
  } else {
    reject("Voc√™ √© maior de idade!");
  }
});

promessa
  .then((mensagem) => {
    //o .then √© um m√©todo que vai executar a promessa e fazer o recebimento dos valores.
    console.log(mensagem);
  })
  .catch((erro) => {
    //.catch vai pegar algum poss√≠vel erro.
    console.log(erro);
  });

//üìçBibliotecas feitas que s√£o "promise based" ‚¨áÔ∏è
const promise1 = Promise.resolve(3);
const promise2 = new Promise((resolve, reject) => {
  setTimeout(resolve, 2500, "testando");
});

Promise.all([promise1, promise2]).then((valores) => console.log(valores));

//üìçAsync Await‚¨áÔ∏è
async function obterValor() {
  // criamos uma fun√ß√£o ass√≠ncrona que n√£o depende de ela ser executada para as pr√≥ximas linhas serem executadas, n√£o travando o programa.
  const promessa = new Promise((resolve, reject) => {
    setTimeout(() => resolve("Valor obtido", 2000));
  });
  const valor = await promessa; // vamos esperar o resultado estar conclu√≠do para atribu√≠-lo a vari√°vel valor.

  console.log(valor); //mostraremos o resultado no console.
}
obterValor(); //invocamos a fun√ß√£o.

async function obterValorComErro() {
  try {
    // criamos uma fun√ß√£o ass√≠ncrona que n√£o depende de ela ser executada para as pr√≥ximas linhas serem executadas, n√£o travando o programa.
    const promessa = new Promise((resolve, reject) => {
      setTimeout(() => reject("Valor com erro obtido", 2000));
    });
    const valor = await promessa; // vamos esperar o resultado estar conclu√≠do para atribu√≠-lo a vari√°vel valor.

    console.log(valor); //mostraremos o resultado no console.
  } catch (error) {
    console.log(error);
  }
}
obterValorComErro();

/*üìçJSON (JavaScript Object Notation)‚¨áÔ∏è
{nome: "teste"} virou {"nome": "teste"}
Isso padroniza a comunica√ß√£o entre front-end e back-end em uma linguagem s√≥
*/
const objeto = { nome: "Jo√£o", idade: 30 };
const jsonString = JSON.stringify(objeto);
console.log(jsonString);

const json = '{"nome": "Jo√£o", "idade": 30}';
const objeto2 = JSON.parse(json);
console.log(objeto2);
